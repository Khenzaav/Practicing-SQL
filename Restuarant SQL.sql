drop database if exists restuarent ;
create database restuarent;
use restuarent;
describe restaurant_orders;
# Sample table
select * from restaurant_orders limit 5;
# Count the total number of orders in your dataset.
select count(*) from restaurant_orders;
# List all the distinct items ordered.
select  distinct `Food Item` from restaurant_orders;
select count(distinct `Food Item`)from restaurant_orders;
# Find the total revenue generated from all orders.
select sum(Price*Quantity) as total_revenue from restaurant_orders;
# Find the average revenue per order.
select sum(Price*Quantity)/count(*) as average_revenue from restaurant_orders;
# List all orders paid using "Cash"
select `Order ID` from restaurant_orders
where `Payment Method`='Cash';
select count(`Order ID`) from restaurant_orders
where `Payment Method`='Cash';
#  Retrieve all orders for a specific date.
SELECT DATE(`Order Time`) AS OrderDate
FROM restaurant_orders;
select `Order ID` from restaurant_orders
where DATE(`Order Time`)= '2025-02-02';
# Most consumed food item in January 2025
select `Order ID`,`Food Item`
from restaurant_orders
where month(`Order Time`)= '1' and year(`Order Time`)='2025';
# Show the cheapest and most expensive item ordered (use MIN and MAX). 
select `Food Item` from restaurant_orders
where Price = (select min(Price) from restaurant_orders);
select `Food Item` from restaurant_orders
where Price = (select max(Price) from restaurant_orders);
#  Count how many different categories (Starter, Main, Dessert) are in the dataset.
select count(distinct Category) from restaurant_orders;
# Find the total number of items sold .
select sum(Quantity) as total_number_of_items_sold from restaurant_orders;
# List all customers who ordered "Pasta".
select `Order ID`,`Customer Name` from restaurant_orders
where `Food Item`='Pasta';
# Find the top 5 most ordered items (by total quantity).
select `Food Item`, SUM(Quantity) as total_quantity 
from restaurant_orders
group by(`Food Item`)
order by total_quantity desc
limit 5 ;
# Find the total revenue generated by each payment method.
select `Payment Method`,sum(Quantity*Price) as total_revenue 
from restaurant_orders
group by(`Payment Method`);
# Find the total revenue generated by each food category.
select Category,sum(Price*Quantity) as total_revenue 
from restaurant_orders
group by (Category);
# Find the number of unique customers who placed orders.
select count(distinct `Customer Name`) from restaurant_orders;
# Show the average order size (average Quantity per order).
select sum(Quantity)/count(distinct `Order ID`) as average_order_size from restaurant_orders;
# List customers who placed more than 1 order.
select count(`Order ID`),`Customer Name` from restaurant_orders
group by(`Customer Name`)
having count(`Order ID`)>1;
# Find all orders where total cost (price × quantity) is greater than 100.
select `Order ID`,sum(Price*Quantity) as total_cost from restaurant_orders
group by(`Order ID`)
having sum(Price*Quantity)>100;
# Find the total revenue generated by each customer.
select `Customer Name`,sum(Price*Quantity) as total_revenue 
from restaurant_orders
group by(`Customer Name`)
order by `Customer Name` asc;
# Find the number of orders placed on each months .
select month(`Order Time`) as months,count(`Order ID`) as number_of_orders_placed 
from restaurant_orders
group by months;
# Show the top 3 food items in the Dessert category by revenue.
select `Food Item`,sum(Price*Quantity) as total_revenue 
from restaurant_orders
where Category='Dessert'
group by `Food Item`
order by total_revenue desc
limit 3; 
#  Find the most profitable item overall.
select `Food Item`,sum(Price*Quantity) as total_revenue 
from restaurant_orders
group by `Food Item`
order by total_revenue desc 
limit 1;
# Find the most profitable item per category.
SELECT `Food Item`, Category, SUM(Price * Quantity) AS total_revenue
FROM restaurant_orders r1
GROUP BY Category, `Food Item`
HAVING SUM(Price * Quantity) = (
    SELECT MAX(total_revenue)
    FROM (
        SELECT Category, SUM(Price * Quantity) AS total_revenue
        FROM restaurant_orders r2
        WHERE r2.Category = r1.Category
        GROUP BY `Food Item`)
         AS sub
);
# Find the customer who spent the most money.
select `Customer Name`,SUM(Price * Quantity) 
from restaurant_orders
GROUP BY `Customer Name`
order BY SUM(Price * Quantity) desc
limit 1;
# Rank customers by their total spending.
select `Customer Name`,SUM(Price * Quantity),rank() over(order BY SUM(Price * Quantity) desc) as ranks
from restaurant_orders
GROUP BY `Customer Name`
order BY SUM(Price * Quantity) desc;
# Rank payment methods by revenue contribution.
select `Payment Method`,SUM(Price * Quantity) AS total_revenue,rank() over(order BY SUM(Price * Quantity) desc) as ranks
from restaurant_orders
group by `Payment Method`
order by ranks;
# Find the day with the highest total revenue.
select DATE(`Order Time`) as days,SUM(Price * Quantity) AS total_revenue
from restaurant_orders
group by days 
order by total_revenue desc
limit 1;
#Find the average number of items per order per customer.
select `Customer Name`,AVG(items_per_order) AS avg_items_per_order
from(
      select `Customer Name`,`Order ID`,sum(Quantity) as items_per_order
from restaurant_orders
group by `Customer Name`,`Order ID`
) as su
group by `Customer Name`
order  by avg_items_per_order desc;
# Create a view showing daily revenue.
drop view if exists daily_revenue;
create view daily_revenue as
select date(`Order Time`) as order_date,SUM(Price * Quantity) AS total_revenue
from restaurant_orders
group by order_date
order by order_date;
drop view if exists customers;
create view customers as
select `Customer Name`,SUM(Price * Quantity) AS total_revenue,count(`Order ID`) as total_order
from restaurant_orders
group by `Customer Name`
order by total_order,`Customer Name`;